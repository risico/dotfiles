" risico's simple-not-so-simple (n)vim config
"
" Some useful plugins that I might want to install at some point:
"
" tpope/vim-dadbod: https://github.com/tpope/vim-dadbod
" tpope/vim-commentary: simpler alternative to tcomment.vim
" itchyny/lightline.vim: currently airline is performant enough

" <---------------------------- Leader ------------------------------>
let mapleader = ","

" vim-plug
call plug#begin()
    " making it pretty

    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    " Plug 'itchyny/lightline.vim'
    " Plug 'flazz/vim-colorschemes'
    Plug 'owickstrom/vim-colors-paramount'
    Plug 'sjl/badwolf'
    Plug 'hauleth/blame.vim'
    Plug 'pbrisbin/vim-colors-off'
    Plug 'fxn/vim-monochrome'
    Plug 'chriskempson/vim-tomorrow-theme'
    Plug 'morhetz/gruvbox'
    Plug 'lifepillar/vim-solarized8'
    Plug 'ajh17/spacegray.vim'
    Plug 'nanotech/jellybeans.vim'
    Plug 'sickill/vim-monokai'
    Plug 'wellsjo/wellsokai.vim'
    Plug 'w0ng/vim-hybrid'
    
    " language specific
    Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go' }
    Plug 'sebdah/vim-delve'
    Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }
    Plug 'cakebaker/scss-syntax.vim', { 'for': 'scss' }
    Plug 'pangloss/vim-javascript', { 'for': ['javascript', '*html'] }
    Plug 'othree/html5.vim', { 'for': '*html' }

    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'Raimondi/delimitMate'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-fugitive'
    Plug 'idanarye/vim-merginal'
    Plug 'machakann/vim-highlightedyank'
    Plug 'terryma/vim-expand-region'
    Plug 'stsewd/fzf-checkout.vim'
    " Plug 'mhinz/vim-signify'
    Plug 'airblade/vim-gitgutter'

    Plug 'scrooloose/nerdtree', { 'on': ['NERDTree', 'NERDTreeToggle', 'NERDTreeFind']}
    Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': ['NERDTree', 'NERDTreeToggle', 'NERDTreeFind']}
    Plug 'vimwiki/vimwiki'

    " Install universal-tags from the tap not the default hombrew ctags
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'tomtom/tcomment_vim'
    Plug 'sheerun/vim-polyglot'
    Plug 'terryma/vim-multiple-cursors'
    Plug '/usr/local/opt/fzf'
    Plug 'junegunn/fzf.vim'
    Plug 'tpope/vim-repeat'
    Plug 'nelstrom/vim-visual-star-search'
    Plug 'brooth/far.vim'
    Plug 'MattesGroeger/vim-bookmarks'
call plug#end()

let g:go_fmt_command = "goimports"
let g:go_imports_mode = 'goimports'
let g:go_rename_command = 'gopls'

let g:go_def_mapping_enabled = 0
" these are default Vim mappings, we're overriding them to make them
" useful again for Go source code
nnoremap <buffer> <silent> gd :GoDef<cr>
nnoremap <buffer> <silent> <C-]> :GoDef<cr>
nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse>:GoDef<cr>
nnoremap <buffer> <silent> g<LeftMouse> <LeftMouse>:GoDef<cr>
nnoremap <buffer> <silent> <C-w><C-]> :<C-u>call go#def#Jump("split")<CR>
nnoremap <buffer> <silent> <C-w>] :<C-u>call go#def#Jump("split")<CR>
nnoremap <buffer> <silent> <C-t> :<C-U>call go#def#StackPop(v:count1)<cr>

" multiple cursors config
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_auto_type_info = 1

let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_buffers_jump = 1
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

let $FZF_DEFAULT_COMMAND = 'fd --type f --hidden --follow --exclude .git'

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif


" Might fuck around with <leader>f for fuzzy file search
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>gd  <Plug>(coc-definition)
nmap <leader>gr  <Plug>(coc-references)

set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}%f
set laststatus=2

" <---------------------------  Color Theme --------------------------->
set termguicolors
set t_Co=256
set background=dark
colorscheme hybrid
let g:gruvbox_contrast_dark="soft"

highlight Normal ctermbg=NONE
highlight nonText ctermbg=NONE


let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'absolutepath', 'modified' ] ],
      \   'right': []
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }


" remove any split  
hi VertSplit guibg=bg guifg=bg

" ColorScheme auto groups https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f
function! MyHighlights() abort
    " highlight Visual     cterm=NONE ctermbg=76  ctermfg=16  gui=NONE guibg=#5fd700 guifg=#000000
    " highlight StatusLine cterm=NONE ctermbg=231 ctermfg=160 gui=NONE guibg=#ffffff guifg=#d70000
    " highlight Normal     cterm=NONE ctermbg=17              gui=NONE guibg=#00005f
    " highlight NonText    cterm=NONE ctermbg=17              gui=NONE guibg=#00005f
    " highlight VertSplit guibg=bg guifg=bg
    hi VertSplit ctermbg=NONE guibg=NONE
    " set fillchars+=vert:|
    " highlight clear VertSplit
    " highlight LineNr ctermfg=bg ctermbg=bg
    " hi VertSplit guibg=NONE guifg=NONE
    highlight clear LineNr
    highlight clear SignColumn
    hi TabLineFill ctermbg=NONE guibg=NONE
    hi TabLine ctermfg=NONE ctermbg=NONE
    hi TabLineSel ctermfg=NONE ctermbg=NONE
    highlight clear TabLineFill
endfunction

augroup ColorschemeChanges
    autocmd!
    autocmd ColorScheme * call MyHighlights()
augroup END


" fugitive git bindings
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gL :exe ':!cd ' . expand('%:p:h') . '; git la'<CR>
nnoremap <Leader>gl :exe ':!cd ' . expand('%:p:h') . '; git las'<CR>
nnoremap <Leader>gh :Silent Glog<CR>
nnoremap <Leader>gH :Silent Glog<CR>:set nofoldenable<CR>
nnoremap <Leader>gw :Gwrite<CR>
nnoremap <Leader>gp :Git push<CR>
nnoremap <Leader>g- :Silent Git stash<CR>:e<CR>
nnoremap <Leader>g+ :Silent Git stash pop<CR>:e<CR><Paste>

" <-----------------------  Auto Command ---------------------------->
if has("autocmd")
    autocmd!
    autocmd bufwritepost $MYVIMRC source $MYVIMRC
    autocmd ColorScheme * highlight ExtraWhitespace ctermbg=black guibg=black
    autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
    autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<

    " prevent the theme to change the background color
    autocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE

    " autocmd VimEnter * colorscheme molokai_dark

    " Remember the last position in file and jump to it
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

    " fix syntaxi highlighting when opening vue files
    " nnoremap <Leader>r :syntax sync fromstart<CR>
    autocmd BufEnter *.vue :syntax sync fromstart

endif
" <------------------------- Code Folding --------------------------->
set foldmethod=manual

" <----------------------------  Key Map ---------------------------->
nnoremap <c-u> viwU
nnoremap <Leader>c :vs $MYVIMRC<CR>
nnoremap <Leader>s :source $MYVIMRC<CR>
nnoremap <space> :

nnoremap <space>n <space>bn
nnoremap <space>p <space>bp

noremap <Leader>e :quit<CR>
noremap <Leader>E :qa!<CR>
noremap <Leader>w :w<CR>

inoremap jk <esc>

set pastetoggle=<F2>
set clipboard=unnamed
set bs=2
set scrolloff=5 " show the next 5 lines when scrolling up/down


let NERDTreeDirArrows=0

map ; :NERDTreeToggle<CR>
map <c-h> <c-w>h
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l

" or just use gt/gT
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>
" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

vnoremap < <gv
vnoremap > >gv

noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')


" <---------------------------- Code Syntax --------------------------->
filetype on
filetype plugin on
filetype plugin indent on
syntax on

" <--------------------- Tab set ------------->
set tabstop=4
set shiftwidth=4
set expandtab
vnoremap <space>%ret! 4 <space>op

" <--------------------------  More for Vim --------------------------->
set number              " show line num
set numberwidth=1       " number width
" set relativenumber    " relative number
" set tw=80             " text width
" set colorcolumn=80    " colorful max text width
set nowrap linebreak nolist   " auto wrap line
highlight ColorColumn ctermbg=233
set cursorline
set hidden

" live substitution (makes the substitue command change the document live)
set inccommand=nosplit

" <----------------------------  Format ------------------------------->
vmap Q gq
nmap Q gqap

" <----------------------------  Others ------------------------------->
set history=700
set undolevels=700

" <--------------------------- Search Setting ------------------------->
set hlsearch
set incsearch
set ignorecase
set smartcase

set wildignore+=*/node_modules/*     " Don't search inside Node.js modules
set wildignore+=*/bower_components/* " Don't search inside bower modules
set wildignore+=*/postgres-data/* " docker database folders
set wildignore+=*/dist/* " webpack dist
set wildignore+=*/vendor/* " golang vendor stuff
set wildignorecase

" <----------------- Disable stupid backup and swap files ------------->
set nobackup
set nowritebackup
set noswapfile

" hide the search highlights by pressing enter
nnoremap <CR> :noh<CR><CR>

" search-and-replace on a current word
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>



" <-------------------------- Plugins Setting ------------------------->

" TagBar setting
nmap <F8> :TagbarToggle<CR>

let g:airline_powerline_fonts = 1
let g:airline_detect_whitespace=0
" let g:airline_section_y = ''
let g:airline_section_x = ''
let g:airline#extensions#branch#format = 2
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
let g:webdevicons_enable_airline_statusline_fileformat_symbols = 0
let g:airline_theme='jellybeans'
let g:airline_mode_map = { '__': '-', 'c': 'C', 'i': 'I', 'ic': 'I', 'ix': 'I', 'n': 'N', 'multi': 'M', 'ni': 'N', 'no': 'N', 'R': 'R', 'Rv': 'R', 's': 'S', 'S': 'S', '': 'S', 't': 'T', 'v': 'V', 'V': 'V',' ': 'V'}
let g:airline_stl_path_style = 'short'
let g:airline#extensions#bookmark#enabled = 1
let g:airline#extensions#coc#enabled = 1
let g:airline#extensions#gutentags#enabled = 1

" Python folding
set nofoldenable

" gives Ctrl+N back (for recursive search)
set complete-=i

" delimitMate
au FileType python let b:delimitMate_nesting_quotes = ['"']

" FZF stuff
nnoremap <Leader>f :Files<CR>
nnoremap <Leader>F :GFiles<CR>
nnoremap <Leader>ag :Rg<Cr>
" nnoremap <Leader>ag :Ag<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>t :Tags<CR>

let g:gutentags_file_list_command = 'rg --files'

" Because I always have it upper case for some reason
:command! Q q
:command! W w

" expand-region stuff
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'il'  :1,
      \ 'ip'  :1,
      \ 'ie'  :0,
      \ }

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" use markdown syntax
let g:vimwiki_list = [{'path': '~/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]

" To be continued
